"""
src/hitl/hitl_manager.py
Manages the Human-in-the-Loop (HITL) review process for ETL task definitions,
including iterative feedback and modification.
"""

# General Imports
import json
from typing import List, Callable, Dict, Any

# AutoGen Imports - for agent management
from autogen import UserProxyAgent, AssistantAgent

# LangChain Imports - for document handling
from langchain_core.documents import Document

# Project Imports - for schema and utility functions
from src.core.vector_db_manager import VectorDBManager
from src.hitl.hitl_utils import get_formatted_context_string, apply_modification_to_task # Import from hitl_utils


def initiate_hitl_review(
    task_json: Dict[str, Any],
    parser_agent_instance: Any, # Used to access its LLM for modifications
    full_context_docs: List[Document],
    original_request: str,
    db_manager_approved_tasks: VectorDBManager,
    ingest_approved_etl_task_func: Callable,
    debug_mode: bool = False
) -> bool:
    """
    Manages the Human-in-the-Loop (HITL) review process with iterative feedback and modification.
    """
    human_data_engineer = UserProxyAgent(
        name="Data_Engineer",
        human_input_mode="ALWAYS",
        max_consecutive_auto_reply=0,
        is_termination_msg=lambda x: x.get("content", "").strip().lower() in ["approve", "approved", "deny", "denied"],
        system_message="You are a data engineer responsible for reviewing and approving ETL pipeline task definitions generated by an AI agent. Review the provided JSON carefully. Respond with 'approve', 'deny', or provide feedback for modification.",
        code_execution_config={"use_docker": False}
    )

    parser_messenger = AssistantAgent(
        name="Parser_Messenger",
        system_message="You present the ETL task definition and facilitate human feedback. You do not generate responses using an LLM in this chat.",
        llm_config=False,
        max_consecutive_auto_reply=0,
    )

    current_task_json = task_json.copy()
    feedback_history = []
    
    # Context string needed for the LLM in modification, but not printed to user
    context_for_llm_modification = get_formatted_context_string(full_context_docs)

    while True:
        chat_message = (
            f"Please review the following ETL task definition. You can '**approve**', '**deny**', or provide **feedback for modification** (e.g., 'add output_location', 'change join type to inner for bureau', 'add features from available dataset context').\n\n"
            f"```json\n{json.dumps(current_task_json, indent=2)}\n```\n\n"
            f"What is your decision or feedback?"
        )

        chat_result = parser_messenger.initiate_chat(
            human_data_engineer,
            message=chat_message,
        )

        if chat_result.chat_history:
            human_response_raw = chat_result.chat_history[-1].get("content", "")
            human_response = human_response_raw.strip().lower()
        else:
            print("Error: chat_history is empty, cannot retrieve human response. Terminating review.")
            return False


        if human_response in ["approve", "approved"]:
            print("\n--- Task Approved by Data Engineer ---")
            ingest_approved_etl_task_func(db_manager_approved_tasks, current_task_json, original_request, modification_feedback_history=feedback_history)
            return True
        elif human_response in ["deny", "denied"]:
            print("\n--- Task Denied by Data Engineer ---")
            if human_response_raw.strip().lower() not in ["deny", "denied"]:
                print(f"Reason for denial: {human_response_raw.strip()}")
            return False
        else:
            feedback_history.append(human_response_raw.strip())
            print(f"\n--- Data Engineer requested modification: '{human_response_raw.strip()}' ---")
            print("AI is updating the task definition based on feedback...")

            updated_task = apply_modification_to_task(
                current_task_json=current_task_json,
                human_feedback=human_response_raw,
                parser_agent_llm=parser_agent_instance.llm, # Pass the LLM directly
                dataset_context=context_for_llm_modification,
                debug_mode=debug_mode
            )

            if "error" in updated_task:
                print("Failed to apply modification. Please check the error messages above.")
                if len(feedback_history) > 3:
                    print("Too many modification attempts failed. Terminating review.")
                    return False
            else:
                current_task_json = updated_task
                print("Task definition updated. Presenting for re-review.")

    return False
